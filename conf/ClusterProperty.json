{
    "clusterproperty": [
        {
            "name": "apiida.utils.maxCacheAge",
            "value": "1800",
            "id": "bfd92d70c60448168e42241232b38535"
        },
        {
            "name": "apiida.utils.maxCacheSize",
            "value": "51200",
            "id": "bfd92d70c60448168e42241232b3852b"
        },
        {
            "name": "apiida.utils.internalStrings",
            "value": "<apiidaInternalStrings>\n\t\t<!-- ----------------------- APIIDA Utilities ----------------------- -->\n\t\t<!-- 010 - 019 Reserved For APIIDA Cache Utilities -->\n\t\t<string code=\"010\" type=\"warning\">APIIDA Util [Cache] - Failed to write value to cache.<\/string>\n\t\t<!-- 020 - 049 Reserved For APIIDA Profiling Utilities -->\n\t\t<string code=\"020\" type=\"warning\">APIIDA Util [Profiling] - Configuration CWP not found.<\/string>\n\t\t<string code=\"021\" type=\"warning\">APIIDA Util [Profiling] - Invalid Configuration.<\/string>\n\t\t<string code=\"022\" type=\"warning\">APIIDA Util [Profiling] - Event Name not found.<\/string>\n\t\t<string code=\"023\" type=\"warning\">APIIDA Util [Profiling] - Profile not found, trying Default.<\/string>\n\t\t<string code=\"024\" type=\"warning\">APIIDA Util [Profiling] - Default profile not found.<\/string>\n\t\t<string code=\"025\" type=\"warning\">APIIDA Util [Profiling] - Invalid profile outputType.<\/string>\n\t\t<string code=\"026\" type=\"warning\">APIIDA Util [Profiling] - No profiles defined in configuration.<\/string>\n\t\t<string code=\"027\" type=\"warning\">APIIDA Util [Profiling] - Invalid profile.<\/string>\n\t<\/apiidaInternalStrings>",
            "id": "bfd92d70c60448168e42241232b3851a"
        },
        {
            "name": "apiida.utils.loggerConfiguration",
            "value": "<loggingConfiguration>\n\n\t<!-- Log Elements are free form, but a good pratice to list them:\n\t--------\n\tStandard\n\t--------\n\tESSENTIAL - Eseential log entries that should always be logged (e.g. payment authroisation logs).\n\tERROR\n\tWARNING\n\tPROFILING\n\t--------\n\tExamples\n\t--------\n\tSERVICE - General service logging.\n\tDEBUG - Debug log statements used during development.\n\tBACKEND - Backend calls information.\n\t-->\n\n\t\t<!-- Time (s) the logging configuration should be cached before reloading. -->\n\t\t<configCacheTime>60<\/configCacheTime>\n\n\t\t<profiles>\n\n\t\t\t<!-- Logging Profile (id=Mandatory). If not found, 'default' will be used. -->\n\t\t\t<profile id=\"default\">\n\n\t\t\t\t<!-- Elements to log (optional, default=log all elements) -->\n\t\t\t\t<logElements>ESSENTIAL,ERROR,WARNING,,PROFILING,SERVICE<\/logElements>\n\n\t\t\t\t<!-- Logging Scrubber Rules (Optional, formats: all|xml|json|url|raw) --> \n\t\t\t\t<scrubberRules>\n\t\t\t\t\t<scrubberRule format=\"all\" tagName=\"password\" replacement=\"*****\"\/>\n\t\t\t\t<\/scrubberRules>\n\t\t\t <\/profile>\n\n\t\t\t <profile id=\"production\">\n\t\t\t\t<logElements>ERROR,WARNING,ESSENTIAL<\/logElements>\n\t\t\t\t<scrubberRules>\n\t\t\t\t\t<scrubberRule format=\"all\" tagName=\"password\" replacement=\"*****\"\/>\n\t\t\t\t<\/scrubberRules>\n\t\t\t <\/profile>\n\n\t\t\t <!-- Development = log everything with no scrubber -->\n\t\t\t <profile id=\"development\"\/>\n\n\t\t\t <profile id=\"testProfile\">\n\t\t\t\t<!-- Log Everything -->\n\t\t\t\t<logElements\/>\n\t\t\t\t<!-- Test Scrubber with raw replace of 'hidethis' -->\n\t\t\t\t<scrubberRules>\n\t\t\t\t\t<scrubberRule format=\"all\" tagName=\"password\" replacement=\"*****\"\/>\n\t\t\t\t\t<scrubberRule format=\"raw\" tagName=\"hidethis\" replacement=\"*****\"\/>\n\t\t\t\t<\/scrubberRules>\n\t\t\t <\/profile>\n\n\t\t<\/profiles>\n\n\t<\/loggingConfiguration>",
            "id": "bfd92d70c60448168e42241232b45b06"
        },
        {
            "name": "apiida.utils.profilingConfiguration",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<profilingConfiguration>\n\t   <!-- Time (s) the profiling configuration should be cached before reloading. -->\n\t   <configCacheTime>60<\/configCacheTime>\n\t   <!-- Profiles, assigned when stopProfiling is called -->\n\t   <profiles>\n\t\t  <!-- if profiling profile id not found, 'default' is used -->\n\t\t  <profile id=\"default\">\n\t\t\t <!-- [enabled|disabled] Enables or disables this profiling profile. This can be used to disable the processing of this profile in prod except when needed. -->\n\t\t\t <state>enabled<\/state>\n\t\t\t <!-- [cache|log|both|none] Output data to buffered cache for retrieval or log per event to the logs. None is when only return variable will be used set. -->\n\t\t\t <outputType>cache<\/outputType>\n\t\t\t <!-- (Optional, default=0) Minimum time (ms) needed before profiling event will be processed (return EA variable will always contain the elapsed time). -->\n\t\t\t <minimumTime>0<\/minimumTime>\n\t\t\t <!-- cache timeout in Seconds (Optional, default=300) -->\n\t\t\t <cacheTimeout>300<\/cacheTimeout>\n\t\t\t <!-- maximum size in Bytes (Optional, default=1048576) -->\n\t\t\t <cacheMaxSize>1048576<\/cacheMaxSize>\n\t\t\t <!-- Event\/Log String Format. The following variables can be used:\n\t\t\t\t\t\t\t$ssgNode - The Gateway Node Name\n\t\t\t\t\t\t\t$serviceName - Service name\n\t\t\t\t\t\t$requesterIp - Requester IP\n\t\t\t\t\t\t$requestUid - Request UID String\n\t\t\t\t\t\t\t$eventName - Profiling Event name\n\t\t\t\t\t\t\t$profileId - Profiling Profile ID used for Event\n\t\t\t\t\t\t\t$startTimeH - Start timestamp of profiling event (Human readable Timestamp)\n\t\t\t\t\t\t\t$startTimeS - Start timestamp of profiling event (Seconds)\n\t\t\t\t\t\t\t$startTimeMs - Start timestamp of profiling event (Milliseconds)\n\t\t\t\t\t\t\t$stopTimeH - Stop timestamp of profiling event (Human readable Timestamp)\n\t\t\t\t\t\t\t$stopTimeS - Stop timestamp of profiling event (Seconds)\n\t\t\t\t\t\t\t$stopTimeMs - Stop timestamp of profiling event (Milliseconds)\n\t\t\t\t\t\t\t$startElt - Profiling event start Elapsed Time\n\t\t\t\t\t\t\t$stopElt - Profiling event stop Elapsed Time\n\t\t\t\t\t\t\t$elapsedTime - Profiling Event elapsed time\n\n\t\t\tNOTE for 'eventCacheFormat': removePrevious parameter of APIIDA Profiling API uses last '{' as search pattern for last event. For this reason the JSON must be a single object definition. -->\n\t\t\t <!-- (Optional) Default: \"APIIDA Util [Profiling] - Profiling event finished. (Event:$eventName, ELT:$elapsedTimems)\" -->\n\t\t\t <eventLogFormat \/>\n\t\t\t <!-- (Optional) Default: {\"SSG\":\"$ssgNode\",\"service\":\"$serviceName\",\"event\":\"$eventName\",\"requestUid\":\"$requestUid\",\"elt\":\"$elapsedTime\"} -->\n\t\t\t <eventCacheFormat \/>\n\t\t  <\/profile>\n\t\t  <!-- Test Profile for development \/ testing -->\n\t\t  <profile id=\"testProfile\">\n\t\t\t <state>enabled<\/state>\n\t\t\t <outputType>both<\/outputType>\n\t\t\t <minimumTime>0<\/minimumTime>\n\t\t\t <cacheTimeout>3600<\/cacheTimeout>\n\t\t\t <cacheMaxSize>52428800<\/cacheMaxSize>\n\t\t\t <eventLogFormat>APIIDA Debug Var Check - Event:$eventName, ELT:$elapsedTimems, Start:$startTimeH, Start(s):$startTimeS, Start(ms):$startTimeMs, StartELT:$startEltms, Stop:$stopTimeH, Stop(s):$stopTimeS, Stop(ms):$stopTimeMs, StopELT:$stopEltms, Profile:$profileId, Service:$serviceName, Request:$requestUid, IP:$requesterIp<\/eventLogFormat>\n\t\t\t <eventCacheFormat>{\"event\":\"$eventName\",\"elapsedTime\":\"$elapsedTimems\",\"Start\":\"$startTimeH\",\"Start_s\":\"$startTimeS\",\"Start_ms\":\"$startTimeMs\",\"StartElt\":\"$startEltms\",\"Stop\":\"$stopTimeH\",\"Stop_s\":\"$stopTimeS\",\"Stop_ms\":\"$stopTimeMs\",\"StopElt\":\"$stopEltms\",\"profile\":\"$profileId\",\"SSG\":\"$ssgNode\",\"service\":\"$serviceName\",\"requestUid\":\"$requestUid\",\"ip\":\"$requesterIp\"}<\/eventCacheFormat>\n\t\t  <\/profile>\n\t\t  <profile id=\"pushgateway\">\n\t\t\t <state>enabled<\/state>\n\t\t\t <outputType>cache<\/outputType>\n\t\t\t <minimumTime>0<\/minimumTime>\n\t\t\t <cacheTimeout>3600<\/cacheTimeout>\n\t\t\t <cacheMaxSize>52428800<\/cacheMaxSize>\n\t\t\t <eventLogFormat>Event:$eventName, ELT:$elapsedTimems<\/eventLogFormat>\n\t\t\t <!--  I suggest you change to this:\n\t\t\t\t<eventCacheFormat>{\n\t\t\t\t\"node\": \"$ssgNode\",\n\t\t\t\t\"service\": \"$serviceName\",\n\t\t\t\t\"event\": \"$eventName\",\n\t\t\t\t\"startms\": \"$startTimeMs\",\n\t\t\t\t\"eltms\": \"$elapsedTime\"\n\t\t\t\t}<\/eventCacheFormat>\n\t-->\n\t\t\t <eventCacheFormat>{\n\t\t\t\t\"nodeName\": \"$ssgNode\",\n\t\t\t\t\"service\": \"$serviceName\",\n\t\t\t\t\"event\": \"$eventName\",\n\t\t\t\t\"startTime\": \"$startTimeH\",\n\t\t\t\t\"startms\": \"$startTimeMs\",\n\t\t\t\t\"elapsedTimeMillis\": \"$elapsedTime\",\n\t\t\t\"requesterIp\": \"$requesterIp\"\n\t\t\t\t\t }<\/eventCacheFormat>\n\t\t  <\/profile>\n\t   <\/profiles>\n\t<\/profilingConfiguration>\n\t",
            "id": "bfd92d70c60448168e42241232b3855f"
        }
    ]
}